{
	"name": "Duplicates",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DelimitedText6",
						"type": "DatasetReference"
					},
					"name": "Colligues"
				},
				{
					"dataset": {
						"referenceName": "DelimitedText7",
						"type": "DatasetReference"
					},
					"name": "NewColligues"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DelimitedText8",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "Union1"
				},
				{
					"name": "Aggregate1"
				},
				{
					"name": "Sort1"
				}
			],
			"script": "source(output(\n\t\tEmpno as string,\n\t\tEmpName as string,\n\t\tLocation as string,\n\t\tJob as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> Colligues\nsource(output(\n\t\tEmpno as string,\n\t\tEmpName as string,\n\t\tLocation as string,\n\t\tJob as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> NewColligues\nColligues, NewColligues union(byName: true)~> Union1\nUnion1 aggregate(groupBy(Empno),\n\teach(match(name!='Empno'), $$ = first($$))) ~> Aggregate1\nAggregate1 sort(asc(Empno, true)) ~> Sort1\nSort1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tName as string,\n\t\tCategory as string,\n\t\tStatus as string,\n\t\tError as string\n\t),\n\tpartitionFileNames:['ConsoladatedList.Csv'],\n\tumask: 0022,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('hash', 1)) ~> sink1"
		}
	}
}